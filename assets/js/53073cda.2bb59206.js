"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[283],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},i=Object.keys(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)n=i[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=l.createContext({}),s=function(e){var t=l.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return l.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),k=r,h=p["".concat(u,".").concat(k)]||p[k]||d[k]||i;return n?l.createElement(h,a(a({ref:t},c),{},{components:n})):l.createElement(h,a({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var s=2;s<i;s++)a[s]=n[s];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2226:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var l=n(7462),r=(n(7294),n(3905));const i={},a="Roadmap",o={type:"mdx",permalink:"/Linkit/roadmap",source:"@site/src/pages/roadmap.mdx",title:"Roadmap",description:"Here are the ambitions and planned features of the Linkit Project and all its side projects",frontMatter:{}},u=[{value:"Framework",id:"framework",level:2},{value:"Website",id:"website",level:2},{value:"Debugger",id:"debugger",level:2},{value:"Builtin",id:"builtin",level:3},{value:"Graphical app",id:"graphical-app",level:3}],s={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,l.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"roadmap"},"Roadmap"),(0,r.kt)("p",null,"Here are the ambitions and planned features of the Linkit Project and all its side projects"),(0,r.kt)("h2",{id:"framework"},"Framework"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Fully exclude Engine dependency from user-side"),(0,r.kt)("li",null,"\ud83d\udd32 Create a SPI in order to extend some parts of the framework"),(0,r.kt)("li",null,"\u2753 Actions shortener (be able to make complex actions that would require a bunch of objects access to be completed)"),(0,r.kt)("li",null,"\ud83d\udd32 Inter-Engine Garbage Collector (GC for unused Network Objects)"),(0,r.kt)("li",null,"\ud83d\udee0\ufe0f Connected Objects",(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udee0 Contracts"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\u2753 Discuss if we keep modifiers"),(0,r.kt)("li",null,"\ud83d\udee0\ufe0f Better invalid contracts error messages"),(0,r.kt)("li",null,"\u2705 Apply contract on classes, methods, fields"),(0,r.kt)("li",null,"\u2705 Ability to specify that an object should become a chipped or mirror object"),(0,r.kt)("li",null,"\u2705 Stub classes for mirroring objects")),(0,r.kt)("li",null,"\ud83d\udee0\ufe0f DSL Language"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\u2705 Class, methods, fields description support"),(0,r.kt)("li",null,"\u2705 Mirror, chipped objects specification support"),(0,r.kt)("li",null,"\u2705 Stub classes / interfaces"),(0,r.kt)("ul",null,"\u2705 Simple agreement description",(0,r.kt)("li",null,'\ud83d\udd32 Add custom engine tags for agreement description (instead of defaults "owner", "cache_owner" etc)'))))),(0,r.kt)("li",null,"\ud83d\udd32 Connection",(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Fully handle engine disconnection without crash"),(0,r.kt)("li",null,"\ud83d\udd32 Fully handle engine reconnection without crash")))),(0,r.kt)("h2",{id:"website"},"Website"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Contribute page"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Add rules and a how-to-contribute paragraph"),(0,r.kt)("li",null,"\ud83d\udd32 Add a mini survey for the contributors to help them choose what they could do based on what they like to do"),(0,r.kt)("li",null,"\ud83d\udd32 For each feature that needs contribution, create a page that explains what to do.")),(0,r.kt)("li",null,"\u2705 Funny workers set as a decoration during dev phase")),(0,r.kt)("h2",{id:"debugger"},"Debugger"),(0,r.kt)("h3",{id:"builtin"},"Builtin"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udee0\ufe0f Watchdog"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\u2705 Simple deadlock detection on local side (can be uncorrect)"),(0,r.kt)("li",null,"\ud83d\udd32 Further deadlock detection by analyzing the other engines states and figure out if the threads are deadlocked or just simply waiting an external event (user input, method execution etc)"),(0,r.kt)("li",null,"\ud83d\udd32 On deadlock, Find what threads are locked on the remote side and then print out the remote threads names in charge of the response.")),(0,r.kt)("li",null,"\ud83d\udee0\ufe0f Debugger"),(0,r.kt)("ul",null,(0,r.kt)("li",null))),(0,r.kt)("h3",{id:"graphical-app"},"Graphical app"),(0,r.kt)("p",null,"The app would be based on the builtin outputs."),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Traffic Panel"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Packet Tab"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Ordered list of all packets being sent/received by the engine"),(0,r.kt)("li",null,"\ud83d\udd32 Ability to apply filters on the list to show specific packets"),(0,r.kt)("li",null,"\ud83d\udd32 Insight for each packets on what's happened during serialization/deserialization"),(0,r.kt)("li",null,"\ud83d\udd32 Insight for each packets on what's happened during injection")),(0,r.kt)("li",null,"\ud83d\udd32 Channel Tab"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 List of opened channels with their nodes information"),(0,r.kt)("li",null,"\ud83d\udd32 List of packet involved into channels (sent and received)"))),(0,r.kt)("li",null,"\ud83d\udd32 Workers Panel"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Insight of each task of each workers"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 What subtasks has been created"),(0,r.kt)("li",null,"\ud83d\udd32 If task is paused, know why (is it waiting for a request, for another task etc...)"))),(0,r.kt)("li",null,"\ud83d\udd32 Persistence Panel"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Get insights on what happens during the serialization of a packet"),(0,r.kt)("ul",null,(0,r.kt)("li",null,"\ud83d\udd32 Know what presence request are done"),(0,r.kt)("li",null,"\ud83d\udd32 Know what Network Object are sent"),(0,r.kt)("li",null,"\ud83d\udd32 Know what objects are replaced by a reference"),(0,r.kt)("li",null,"\ud83d\udd32 Know what unregistered classes and SyncDef classes are sent")))))}c.isMDXComponent=!0}}]);