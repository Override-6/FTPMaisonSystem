name "FSControl"

import java.nio.file.Path
import java.nio.file.Files
import fr.linkit.**
import java.net.URI
import scala.collection.mutable
import java.io.*
import java.nio.file.*
code ${
    import scala.collection.mutable
    import fr.linkit.engine.gnom.cache.sync.DefaultSynchronizedObjectCache
    import fr.linkit.api.gnom.network.Engine
    val homes = Â£{@homes: mutable.HashMap[Engine, Path]}
}

agreement only_cache_owner = discard * -> accept cache_owner -> appoint cache_owner
agreement only_owner = discard * -> accept owner -> appoint owner
agreement broadcast = accept*

describe Path [chip] {
    foreach method enable following only_cache_owner
}
describe statics Path {
    of(path: String, String[]) following only_cache_owner {
        path -> in: ${(path, remote) => homes(remote).toString + s"/$path"}
        chip returnvalue
    }
    hide method of(URI) "Please use method of(String, String[]) instead."
}
describe statics Files {
    foreach method enable following only_cache_owner
    newInputStream(Path, OpenOption[]) following only_cache_owner {
        chip returnvalue
    }
    newOutputStream(Path, OpenOption[]) following only_cache_owner {
        chip returnvalue
    }
}

describe OutputStream [chip] {
    foreach method enable following only_owner
}
describe InputStream [chip] {
    foreach method enable following only_owner
}