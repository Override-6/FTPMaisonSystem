name "FSControl"

import java.nio.file.Path
import java.nio.file.Files
import fr.linkit.**
import java.net.URI
import scala.collection.mutable
import java.io.*
import java.util.function.*
import java.util.*
import java.nio.file.**

code ${
    import scala.collection.mutable
    import fr.linkit.engine.gnom.cache.sync.DefaultConnectedObjectCache
    import fr.linkit.api.gnom.network.Engine
    val homes = Â£{@homes: mutable.HashMap[Engine, Path]}
}
@autochip(true) //enables auto chip for objects expected as being synchronized / mirrored but whose runtime class can't support generated 'Sync' class generation / overriding.

describe statics Files
describe statics System
describe statics FileSystems

describe WatchService {
    [executor = @watchServiceWorkers]
    take() following only_owner {
        chip returnvalue
    }
}

describe statics Path {
    of(path: String, String[]) {
        path -> in: ${(path, remote) => homes(remote).toString + s"/$path"}
        chip returnvalue
    }
    hide method of(URI) "Please use method of(String, String[]) instead."
}
