name "NetworkContract"

import fr.linkit.api.gnom.cache.SharedCacheManager
import fr.linkit.engine.gnom.network.DefaultEngine
import fr.linkit.engine.gnom.network.NetworkDataTrunk
import fr.linkit.api.gnom.network.Network
import fr.linkit.api.gnom.network.Engine
import java.nio.file.Path
import java.net.URI
import fr.linkit.api.gnom.network.ExternalConnectionState
import fr.linkit.engine.gnom.network.AbstractNetwork
import fr.linkit.engine.gnom.cache.SharedCacheOriginManager

scala ${
    val network = Â£{@network: AbstractNetwork}
}

agreement current_and_origin = discard * -> accept current and owner -> appoint current
agreement broadcast = accept * -> appoint current

describe DefaultEngine {
    updateState(ExternalConnectionState) following current_and_origin
}
describe NetworkDataTrunk {
    newEngine(String) following broadcast
    addEngine(sync Engine)
}

modifier SharedCacheOriginManager {
    out: ${(cache, _) => network.transformToDistant(cache)}
}
modifier DefaultEngine {
    out: ${(e, _) => {
       new DefaultEngine(e.identifier, network.findCacheManager(e.identifier).get)
   }}
}