

import fr.linkit.api.gnom.cache.SharedCacheManager
import fr.linkit.engine.gnom.network.DefaultEngine
import fr.linkit.api.gnom.network.Network
import fr.linkit.api.gnom.network.Engine

scala ${
    val network = £{@network: Network}
}


describe mirroring DefaultEngine stub Engine {
    enable method updateState(ExternalConnectionState, Network) as broadcast_if_root_owner
    hide method test(x, y) "WAW"
}

x: String[] -> {
    in : ${(x, _) => /***/}
    out: ${(x, _) => /***/}
}

agreement only_owner = {
    discard * -> accept owner -> appoint owner
}
agreement current_and_origin = {
    discard * -> accept current and owner -> appoint current
}
agreement broadcast_if_owner = {
    if (current is owner) { accept * } else { discard * } -> accept current -> appoint current
}
describe statics Path {
    sync *
    [procrastinator = @my_procrastinator]
    foreach method enable as broadcast {
        sync returnvalue
    }
    enable method of(URI) as broadcast_if_owner

    [procrastinator = @lwjgl]
    enable method of(str: String, array: String[]) {
        str -> {
            in : ${(x, _) => x + £{@test_value: String}}
            out: ${(x, _) => x + £{@other_value_lol: String}}
        }
        array -> x
        sync returnvalue
    }

}

modifier SharedCacheManager {
    out: ${(cache, _) => network.transformToDistant(cache)}
}
modifier DefaultEngine {
    out: ${(e, _) => {
       new DefaultEngine(e.identifier, network.findCacheManager(identifier).get)
   }}
}