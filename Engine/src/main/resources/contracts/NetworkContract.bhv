name "NetworkContract"
import fr.linkit.api.gnom.**
import fr.linkit.engine.gnom.**
import fr.linkit.engine.internal.mapping.*
import java.nio.file.Path
import java.net.URI

code ${
    val network = Â£{@network: AbstractNetwork}
}

agreement current_and_origin = discard * -> accept current and owner -> appoint current
agreement broadcast = accept * -> appoint current
agreement only_owner = discard * -> accept owner -> appoint owner
describe DefaultEngine {
    updateState(ExternalConnectionState) following current_and_origin
}
describe NetworkDataTrunk {
    staticAccesses() {
        sync returnvalue
    }
    newEngine(String) following broadcast
    addEngine(sync DefaultEngine)
}

describe StaticAccesses {
    newStaticAccess0(int, ContractDescriptorData) following broadcast
}

describe RemoteClassMappings {
    addClassToMap(String) following only_owner
    onClassMapped(int) following broadcast
}

modifier SharedCacheOriginManager {
    out: ${(cache, _) => network.transformToDistant(cache)}
}
modifier DefaultEngine {
    out: ${(e, _) => {
       new DefaultEngine(e.identifier, network.findCacheManager(e.identifier).get)
   }}
}