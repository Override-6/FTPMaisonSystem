

import fr.linkit.api.gnom.cache.SharedCacheManager
import fr.linkit.engine.gnom.network.DefaultEngine
import fr.linkit.engine.gnom.network.NetworkDataTrunk
import fr.linkit.api.gnom.network.Network
import fr.linkit.api.gnom.network.Engine
import java.nio.file.Path
import java.net.URI
import fr.linkit.api.gnom.network.ExternalConnectionState
import fr.linkit.engine.gnom.network.AbstractNetwork
import fr.linkit.engine.gnom.cache.SharedCacheOriginManager

scala ${
    val network = Â£{@network: AbstractNetwork}
}

describe DefaultEngine {
    enable method updateState(ExternalConnectionState) as current_and_origin
}
describe NetworkDataTrunk {
    enable method newEngine(String) as broadcast
    enable method addEngine(sync Engine)
}
agreement current_and_origin = {
    discard * -> accept current and owner -> appoint current
}
agreement broadcast = {
    accept * -> appoint current
}
modifier SharedCacheOriginManager {
    out: ${(cache, _) => network.transformToDistant(cache)}
}
modifier DefaultEngine {
    out: ${(e, _) => {
       new DefaultEngine(e.identifier, network.findCacheManager(e.identifier).get)
   }}
}