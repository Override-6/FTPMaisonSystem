/*
 *  Copyright (c) 2021. Linkit and or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software you can only use it for personal uses, studies or documentation.
 *  You can download this source code, and modify it ONLY FOR PERSONAL USE and you
 *  ARE NOT ALLOWED to distribute your MODIFIED VERSION.
 *
 *  Please contact maximebatista18@gmail.com if you need additional information or have any
 *  questions.
 */

package gen.$WrappedClassPackage$

import $WrappedClassName$
import fr.linkit.api.connection.cache.obj.InvocationChoreographer
import fr.linkit.api.connection.cache.obj.description.WrapperNodeInfo
import fr.linkit.api.connection.cache.obj.PuppetWrapper
import fr.linkit.api.connection.cache.obj.Puppeteer
import fr.linkit.api.local.system.AppLogger
import fr.linkit.engine.connection.cache.obj.{AbstractPuppetWrapper, PuppetAlreadyInitialisedException}
import fr.linkit.engine.connection.cache.obj.generation.WrapperInstantiationHelper
import fr.linkit.engine.local.utils.JavaUtils.nl
import fr.linkit.engine.local.utils.ScalaUtils

import java.util
import java.util.Arrays

/*
* this class defines the main fields
* and methods required for a PuppetWrapper
* */
@SerialVersionUID($CompileTime$L)
class $WrappedClassSimpleName$Wrapper$TParamsIn$ extends AbstractPuppetWrapper[$WrappedClassSimpleName$$TParamsOut$] {

    //Fun fact: Override annotations are conventional.
    //They does not affect abstraction or classes behaviors.
    //Override annotations are removed at compilation.

    override def wrappedClass: Class[_] = classOf[$WrappedClassSimpleName$$TParamsInBusted$]

!!INHERITED_METHODS!! {
    $Override$ def $MethodName$$GenericTypesIn$$ParamsIn$: $ReturnType$ = {
        handleCall[$ReturnType$]($MethodID$)(Array($ParamsOutFlatten$))(args => Array(this: Any $ParamsOutFlattenLambda$): Any)
    }
}

}
