/*
 *  Copyright (c) 2021. Linkit and or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software you can only use it for personal uses, studies or documentation.
 *  You can download this source code, and modify it ONLY FOR PERSONAL USE and you
 *  ARE NOT ALLOWED to distribute your MODIFIED VERSION.
 *
 *  Please contact overridelinkit@gmail.com if you need additional information or have any
 *  questions.
 */

package $ClassPackage$

import $OriginClassName$
import fr.linkit.api.gnom.cache.sync.SynchronizedObject
import fr.linkit.api.gnom.cache.sync.ConnectedObjectReference
import fr.linkit.api.gnom.network.statics.StaticsCaller
import fr.linkit.engine.gnom.cache.sync.AbstractSynchronizedObject
import fr.linkit.engine.internal.language.bhv.interpreter.NoSuchLambdaExpressionException
import fr.linkit.engine.internal.utils.JavaUtils.nl

import scala.annotation.switch

/*
* this class defines the main fields
* and methods required for a SynchronizedObject
* */
@SerialVersionUID($CompileTime$L)
class $ClassName$ extends StaticsCaller {

    override final val staticsTarget: Class[_] = classOf[$OriginClassSimpleName$]

    override final def call(nameId: String, args: Array[Any]): Any = {
        (nameId: @switch) match {
        !!INHERITED_METHODS!! {
            case "$MethodNameID$" => _$MethodNameID$($ParamsOutMatch$)
        }
            case _ => throw new NoSuchLambdaExpressionException("Could not find method with id '" + nameId + "' in this static method caller.")
        }
    }

!!CASTS!! {
    @inline
    private implicit def cast_$Count$[$Params$, X[$ParamsWildcards$]](y: X[$ParamsWildcards$]): X[$Params$] = y.asInstanceOf[X[$Params$]]
}
!!INHERITED_METHODS!! {
    protected def _$MethodNameID$($ParamsIn$): $ReturnType$ = $OriginClassSimpleName$.$MethodName$($ParamsOut$).asInstanceOf[$ReturnType$]
}
}

final object $ClassName$ {
    final val staticsTarget: Class[_] = classOf[$OriginClassSimpleName$]
}