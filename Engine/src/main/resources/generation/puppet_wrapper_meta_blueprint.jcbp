/*
 *  Copyright (c) 2021. Linkit and or its affiliates. All rights reserved.
 *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 *  This code is free software; you can only use it for personal uses, studies or documentation.
 *  You can download this source code, and modify it ONLY FOR PERSONAL USE and you
 *  ARE NOT ALLOWED to distribute your MODIFIED VERSION.
 *
 *  Please contact maximebatista18@gmail.com if you need additional information or have any
 *  questions.
 */

package gen.$WrappedClassPackage$;

import $WrappedClassName$;
import fr.linkit.api.connection.cache.repo.InvocationChoreographer
import fr.linkit.api.connection.cache.repo.description.{PuppetDescription, PuppeteerDescription}
import fr.linkit.api.connection.cache.repo.PuppetWrapper
import fr.linkit.api.connection.cache.repo.Puppeteer
import fr.linkit.engine.connection.cache.repo.PuppetAlreadyInitialisedException
import fr.linkit.engine.connection.cache.repo.generation.WrapperInstantiator
import fr.linkit.engine.local.utils.JavaUtils.{getNull => nl}
import fr.linkit.engine.local.utils.ScalaUtils
/*
 * This class overrides every scala's setters, getters and other scalac's meta stuff
 * because this is impossible to override them from scala language.
 */
public class Meta$WrappedClassSimpleName$$TParamsIn$ extends Puppet$WrappedClassSimpleName$$TParamsOut$ {

    private <T> T performRmi(int id, Object[] args, Supplier<T> superCall, T defaultResult) {
        if (choreographer.isMethodExecutionForcedToLocal() || !description.isRMIEnabled(id)) {
            return superCall.get();
        }
        //# From here we are sure that we want to perform a remote
        //# method invocation. (A Local invocation (super.xxx()) can be added).
        if (description.isInvokeOnly(id)) {
            puppeteer.sendInvoke(id, args);
            T localResult = defaultResult;
            if (description.isLocalInvocationForced(id)) {
                localResult = superCall.get();
            }
            return localResult;
        }
        T result;
        if (description.isLocalInvocationForced(id)) {
            result = superCall.get();
            puppeteer.sendInvoke(id, args);
        } else {
            result = puppeteer.sendInvokeAndWaitResult(id, args);
        }
        return result;
    }

!!INHERITED_META!! {
    @Override
    public $GenericTypes$ $ReturnType$ $MethodName$$ParamsIn$ {
        $|If ReturnType == "void"|$ {
            performRmi($MethodID$, new Object[]{$ParamsOut$}, () -> super.$MethodName$($ParamsOut$), $DefaultReturnType$)
        } $|Else|$ {
            return performRmi($MethodID$, new Object[]{$ParamsOut$}, () -> super.$MethodName$($ParamsOut$), $DefaultReturnType$)
        }
    }
}
}